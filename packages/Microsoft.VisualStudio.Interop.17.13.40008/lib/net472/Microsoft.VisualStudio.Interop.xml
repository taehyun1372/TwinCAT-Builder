<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Interop</name>
    </assembly>
    <members>
        <member name="M:EnvDTE.TextPane.TryToShow(EnvDTE.TextPoint,EnvDTE.vsPaneShowHow,System.Object)">
            <remarks>
            The <paramref name="How" /> param defaults to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowAsIs" /> in IDL but can't be defaulted here because <paramref name="PointOrCount" /> can't be defaulted.
            </remarks>
        </member>
        <member name="M:EnvDTE.TaskItems.Add(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean)">
            <remarks>
            The <paramref name="Priority" /> defaults to <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium" /> in IDL but we can't default it here as the <paramref name="Icon" /> cannot be defaulted
            </remarks>
        </member>
        <member name="M:EnvDTE80.Process2.Attach2(System.Object)">
            <param name="Engines">
            Single <see cref="T:System.String" /> or an array of either <see cref="T:System.String" /> or <see cref="T:EnvDTE80.Engine" /> objects
            </param>
        </member>
        <member name="M:EnvDTE80.TaskItems2.Add(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean)">
            <remarks>
            The <paramref name="Priority" /> defaults to <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium" /> in IDL but we can't default it here as the <paramref name="Icon" /> cannot be defaulted
            </remarks>
        </member>
        <member name="M:EnvDTE80.TaskItems2.Add2(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <remarks>
            The <paramref name="Priority" /> defaults to <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium" /> in IDL but we can't default it here as the <paramref name="Icon" /> cannot be defaulted
            </remarks>
        </member>
        <member name="M:EnvDTE80.EditPoint2.TryToShow(EnvDTE.vsPaneShowHow,System.Object)">
            <remarks>
            The <paramref name="How" /> param defaults to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowCentered" /> in IDL but we can't default it here because <paramref name="PointOrCount" /> can't be defaulted.
            </remarks>
        </member>
        <member name="M:EnvDTE80.TextPane2.TryToShow(EnvDTE.TextPoint,EnvDTE.vsPaneShowHow,System.Object)">
            <remarks>
            The <paramref name="How" /> param defaults to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowAsIs" /> in IDL but can't be defaulted here because <paramref name="PointOrCount" /> can't be defaulted.
            </remarks>
        </member>
        <member name="M:EnvDTE90.Process3.Attach2(System.Object)">
            <param name="Engines">
            Single <see cref="T:System.String" /> or an array of either <see cref="T:System.String" /> or <see cref="T:EnvDTE80.Engine" /> objects
            </param>
        </member>
        <member name="M:EnvDTE90a.Process4.Attach2(System.Object)">
            <param name="Engines">
            Single <see cref="T:System.String" /> or an array of either <see cref="T:System.String" /> or <see cref="T:EnvDTE80.Engine" /> objects
            </param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.GetName">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.GetProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.ContainsProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.AllPropertyNames">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetOptOutFriendlyFlag(System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.AddPropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.RemovePropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetPiiProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetIntPiiProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetLongPiiProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetDoublePiiProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent.SetStringPiiProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.GetName">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.GetProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.ContainsProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.AllPropertyNames">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetOptOutFriendlyFlag(System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.AddPropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.RemovePropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetPiiProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetIntPiiProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetLongPiiProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetDoublePiiProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.SetStringPiiProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.Start">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.End">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.EndWithDuration(System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryActivity.CorrelationId">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.GetProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.SetProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.RemoveProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.SetBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.SetDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.SetIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.SetLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.SetShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.SetStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.ContainsProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag.AllPropertyNames">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.ContextName">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.GetProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.RemoveSharedProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.Close">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostPiiProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostIntPiiProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostLongPiiProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostDoublePiiProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.PostStringPiiProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedPiiProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedIntPiiProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedLongPiiProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedDoublePiiProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext.SetSharedStringPiiProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.GetSessionId">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SerializeSettings">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostSimpleEvent(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostEvent(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.RemoveSharedProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.CreateContext(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.IsUserOptedIn">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.IsUserMicrosoftInternal">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.CanCollectPrivateInformation">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetUserOptedIn(System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.RegisterPropertyBag(System.String,Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.GetPropertyBag(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.UnregisterPropertyBag(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostPiiProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostIntPiiProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostLongPiiProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostDoublePiiProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.PostStringPiiProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedPiiProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedIntPiiProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedLongPiiProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedDoublePiiProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.SetSharedStringPiiProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.GetSharedProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession.GetContext(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService.GetDefaultSession">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService.CreateEvent(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService.CreateActivity(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService.CreateActivityWithParentCorrelationId(System.String,System.Guid@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService.CreatePropertyBag">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.SVsSettingsPersistenceManager">
            <summary>
            The service represented by this interface is safe to access from any thread.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.SVsTelemetryService">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService.AllEnabledCachedFlights">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService.Start">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService.IsCachedFlightEnabled(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService.IsFlightEnabledAsync(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService.AdviseFlightEvents(Microsoft.Internal.VisualStudio.Shell.Interop.IVsFlightEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExperimentationService.UnadviseFlightEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.SVsExperimentationService">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsFlightEvents">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsFlightEvents.OnFlightsChanged">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.SetContextElement(System.Guid,System.Guid)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.SetAndGetContextElement(System.Guid,System.Guid)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.GetContextElement(System.Guid)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.PushContext(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.PopContext(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.GetCurrentContext">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.ReleaseContext(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsExecutionContextTracker.PushContextEx(System.UInt32,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.SVsExecutionContextTracker">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService.RegisterCorrelationForStringAssetId(System.String,System.String,Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEventCorrelation)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService.RegisterCorrelationForGuidAssetId(System.String,System.Guid,Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEventCorrelation)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService.UnregisterCorrelationForStringAssetId(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService.UnregisterCorrelationForGuidAssetId(System.String,System.Guid)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService.GetCorrelationForStringAssetId(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryAssetService.GetCorrelationForGuidAssetId(System.String,System.Guid)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.GetName">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.GetProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetBoolProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetDoubleProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetIntProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetLongProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetShortProperty(System.String,System.Int16)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetStringProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.ContainsProperty(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.AllPropertyNames">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetOptOutFriendlyFlag(System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.AddPropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.RemovePropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetPiiProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetIntPiiProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetLongPiiProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetDoublePiiProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetStringPiiProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetMetricProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetSettingProperty(System.String,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetBoolSettingProperty(System.String,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetIntSettingProperty(System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetLongSettingProperty(System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetDoubleSettingProperty(System.String,System.Double)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.SetStringSettingProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.Correlation">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.Severity">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEvent2.Correlate(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEventCorrelation)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEventCorrelation">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEventCorrelation.Id">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryEventCorrelation.EventType">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.GetDefaultSession">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.CreateEvent(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.CreateActivity(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.CreateActivityWithParentCorrelationId(System.String,System.Guid@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.CreatePropertyBag">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.CreateOperationEvent(System.String,System.UInt32,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.CreateUserTaskEvent(System.String,System.UInt32,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.CreateAssetEvent(System.String,System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService2.GetAssetService">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch">
             <summary>
             State of single reload batch. Include description of relevant [externally] changed files,
             resulting project /solution actions (such reload).
            
             IVsSolutionReloadBatch is free-threaded object and can be used without switching to UI thread.
             </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.BatchId">
            <summary>
            Batch id - unique withing solution open session.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.LastChangeId">
            <summary>
            Last state change id. Each call to TryAddXXX might change the state if introduce a new reload action or new changed files hint.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.Stage">
            <summary>
            Note if BatchStage != COMPLETED, the state can be changed at any time.
            Only the IVsSolutionBatchUpdateManagerEvents event listeners are guaranteed to have stable data in this case
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.HandlerId">
            <summary>
            batch handler friendly id.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.HasSolutionReload">
            <summary>
            batch require solution reload.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.BatchTask">
            <summary>
            VS task tracking batch progress.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.RequestComplete">
            <summary>
            VS request batch completion as soon as possible.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.RequestCancel">
            <summary>
            VS request batch cancellation.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.DisableChangeNotifications">
            <summary>
            Needed to support original solution external file changes handler behavior. This will only apply while batch is active.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.IsFilesChanged(System.UInt32,System.String[],System.Boolean[])">
            <summary>
            Check the requested files against batch state (based on aggregated changes files via TryAddChangedFiles).
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.GetProjectsAction(System.UInt32,System.Guid[],System.UInt32[])">
            <summary>
            Check the status of a projects
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.TryAddSolutionReload">
            <summary>
            Request solution reload
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.TryAddProjectsReload(System.UInt32,System.UInt32,System.Guid[])">
            <summary>
            Request specific projects reload, fForceReload applies to all specified projects. Note even if reloadAction = DRA_ReloadProject [some of] selected projects can still end up being forcefully reloaded (even if they support own reload)
            if some other logic requires that for same project[s]. If fForceReload = DRA_ForceReloadProject, it is guarantee that they will be forcefully reloaded (unless solution is reloaded which will override any project reloads).
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.TryAddChangedFiles(System.UInt32,System.String[])">
            <summary>
            Add files changes hints (can be used by reload logic extender during compute stage).
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler">
            <summary>
            State of single reload batch. Include description of relevant [externally] changed files,
            resulting project /solution actions (such reload).
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.HandlerId">
            <summary>
            friendly HandlerId. it is string instead of usual guid for better readability. We don't publish any predefined values.
            this scenario is always an arm race, so if specific provider wants details they need to discover them.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanGiveControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <summary>
            check current provider if it will allow giving up control to a different reload handler.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanTakeControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <summary>
            check if provider can/want take control and handle the currently opened scope.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanJoin(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <summary>
            check if provider is ok to join the currently opened scope and let existing handler drive it.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanCommitBatch(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            called on BG thread when a state changed, or handler instructed us (via timeout).
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanCommitBatchUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            called on UI thread before commencing modal reload phase.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.ExecuteReloadUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.Guid[],System.UInt32[])">
            <summary>
            commence the actual reload, once this is called no additional changes can be included in batch scope and it will be closed (one way or another) after this method finish.
            In theory we can support async, but all current cases do require UI thread anyway (and it is unlikely we want to change that).
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_ReloadProject">
            <summary>
            Project to be reload (closed and opened) if needed, Example: project file[s] change. If project can not handle external change, it will be reloaded by solution.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_ForceReloadProject">
            <summary>
            Project to be reload (closed and opened) for this batch.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_ReloadSolution">
            <summary>
            Force solution reload, supersedes any other actions.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_AddProject">
            <summary>
            Project to be added to the solution for this batch.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_RemoveProject">
            <summary>
            Project to be removed from the solution for this batch.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_RenameProject">
            <summary>
            Project to be renamed in the solution for this batch.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_UpdateProjectParent">
            <summary>
            Project parent to be changed in the solution for this batch.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionReloadManagerService">
            <summary>
            IVsSolutionReloadManager implementation service id.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager">
             <summary>
             Manages external changes that are resolved to project[s] reload.
             Provides batching and ability to specialize reload logic.
            
             IVsSolutionReloadManager is free-threaded service and can be called from any thread without switching to UI thread.
             </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.CurrentBatch">
            <summary>
            get the current reload batch (if any, can return null).
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.Advise(System.Guid@,System.Object)">
            <summary>
            The IVsSolutionReloadManagerEvents can be used to both react on reload changes as well as influence the outcome.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.Unadvise(System.UInt32)">
            <summary>
            The IVsSolutionReloadManagerEvents can be used to both react on reload changes as well as influence the outcome.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.BeginBatch(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <summary>
            Start a reload batch scope
            </summary>
            <param name="pExecutor">pExecutor is the batch commit handler. can be null in which case we use the current or default one.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.AddSolutionReload">
            <summary>
            A mechanism for propagating "unbound" reload changes, aka where changes handler, just want to be included in any currently open batch.
            if there is no such we will create a default batch for these.
            Changes can still can be rejected from reload manager (for example if there is no open solution). In that case we return ppHandlingBatch==null;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Designer.Interfaces.IVSMDPerPropertyBrowsing.GetPropertyAttributes(System.Int32,System.UInt32@,System.IntPtr,System.IntPtr)">
            <summary>
            Gets the list of attributes for the object.
            </summary>
            <param name="dispid">
            The dispid of the property to retrieve attributes
            </param>
            <param name="pceltAttrs">
            the number of attribute type names in <paramref name="ppbstrTypeNames" />
            </param>
            <param name="ppbstrTypeNames">
            Attribute type names, such as System.ComponentModel.BrowsableAttribute, or System.ComponentModel.DescriptionAttribute.  This can be the name of any type that derives from System.Attribute. The array is callee allocated and will be caller freed using <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />. Strings themselves should be freed with <see cref="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)" />. It can also be a static instance name such as System.ComponentModel.BrowsableAttribute.No, which will cause the initializer value to be ignored.
            </param>
            <param name="ppvarAttrValues">
            An array of variants to be used to initialize the given attributes.  If the attributes have a ctor that takes a parameter, the given argument will be used to iniitalize the attribute.  If the initializer is NULL, VT_EMPTY or VT_NULL, the default ctor will be called.  Variants will be caller freed individually by pInvoking VariantClear. The array must be freed calling <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSettingsManager">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetBool(System.String,System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetInt(System.String,System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetUnsignedInt(System.String,System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetInt64(System.String,System.String,System.Int64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetUnsignedInt64(System.String,System.String,System.UInt64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetString(System.String,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetBinary(System.String,System.String,System.UInt32,System.Byte[],System.UInt32[])">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetBoolOrDefault(System.String,System.String,System.Int32,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetIntOrDefault(System.String,System.String,System.Int32,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetUnsignedIntOrDefault(System.String,System.String,System.UInt32,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetInt64OrDefault(System.String,System.String,System.Int64,System.Int64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetUnsignedInt64OrDefault(System.String,System.String,System.UInt64,System.UInt64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetStringOrDefault(System.String,System.String,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetPropertyType(System.String,System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.PropertyExists(System.String,System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.CollectionExists(System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetSubCollectionCount(System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetPropertyCount(System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetLastWriteTime(System.String,Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME[])">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetSubCollectionName(System.String,System.UInt32,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore.GetPropertyName(System.String,System.UInt32,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetBool(System.String,System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetInt(System.String,System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetUnsignedInt(System.String,System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetInt64(System.String,System.String,System.Int64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetUnsignedInt64(System.String,System.String,System.UInt64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetString(System.String,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetBinary(System.String,System.String,System.UInt32,System.Byte[],System.UInt32[])">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetBoolOrDefault(System.String,System.String,System.Int32,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetIntOrDefault(System.String,System.String,System.Int32,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetUnsignedIntOrDefault(System.String,System.String,System.UInt32,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetInt64OrDefault(System.String,System.String,System.Int64,System.Int64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetUnsignedInt64OrDefault(System.String,System.String,System.UInt64,System.UInt64@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetStringOrDefault(System.String,System.String,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetPropertyType(System.String,System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.PropertyExists(System.String,System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.CollectionExists(System.String,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetSubCollectionCount(System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetPropertyCount(System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetLastWriteTime(System.String,Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME[])">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetSubCollectionName(System.String,System.UInt32,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.GetPropertyName(System.String,System.UInt32,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.SetBool(System.String,System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.SetInt(System.String,System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.SetUnsignedInt(System.String,System.String,System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.SetInt64(System.String,System.String,System.Int64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.SetUnsignedInt64(System.String,System.String,System.UInt64)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.SetString(System.String,System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.SetBinary(System.String,System.String,System.UInt32,System.Byte[])">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.DeleteProperty(System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.CreateCollection(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore.DeleteCollection(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager.GetCollectionScopes(System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager.GetPropertyScopes(System.String,System.String,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager.GetReadOnlySettingsStore(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager.GetWritableSettingsStore(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager.GetApplicationDataFolder(System.UInt32,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager.GetCommonExtensionsSearchPaths(System.UInt32,System.String[],System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry5">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry5.CreateAggregatedManagedInstance(System.String,System.String,System.String,System.IntPtr,System.Guid@,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2.StartWaitDialog(System.String,System.String,System.String,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2.StartWaitDialogWithPercentageProgress(System.String,System.String,System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2.EndWaitDialog(System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2.UpdateProgress(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2.HasCanceled(System.Boolean@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogFactory">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogFactory.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog2@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsThreadedWaitDialogFactory">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager2.ParseResourceID(System.String,System.UInt32,System.String@,System.Guid@,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager2.AnnotateIDIfNecessary(System.String,System.Guid@,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIFactory">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIFactory.CreateUIElement(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIElement@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterUIFactories">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterUIFactories.CreateUIElement(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIElement@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterUIFactories.RegisterUIFactory(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsUIFactory)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUIFactory">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsDataSourceFactory">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsDataSourceFactory.GetDataSource(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterDataSourceFactories">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterDataSourceFactories.GetDataSource(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterDataSourceFactories.RegisterDataSourceFactory(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsDataSourceFactory)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDataSourceFactory">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTask">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.ContinueWith(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.ContinueWithEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.Start">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.Cancel">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.GetResult">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.AbortIfCanceled">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.Wait">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTask.WaitEx(System.Int32,System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.IsFaulted">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.IsCompleted">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.IsCanceled">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.AsyncState">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTask.Description">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskBody">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskBody.DoWork(Microsoft.VisualStudio.Shell.Interop.IVsTask,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask[],System.Object@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.Task">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.SetResult(System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.SetCanceled">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.SetFaulted(System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource.AddDependentTask(Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTask(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTaskEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.ContinueWhenAllCompleted(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask[],Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.ContinueWhenAllCompletedEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTaskCompletionSource">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService.CreateTaskCompletionSourceEx(System.UInt32,System.Object)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsTaskSchedulerService">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.StartWaitDialog(System.String,System.String,System.String,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.StartWaitDialogWithPercentageProgress(System.String,System.String,System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.EndWaitDialog(System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.UpdateProgress(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.HasCanceled(System.Boolean@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog3.StartWaitDialogWithCallback(System.String,System.String,System.String,System.Object,System.String,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.DeploySuccess">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.PackageFullName">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.FirstAppUserModelID">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployResult.LayoutFolder">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployOperation">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployOperation.StopDeploy(System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployOperation.GetDeployResult">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.AdviseAppContainerDeployEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.UnadviseAppContainerDeployEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.StartDeployAsync(System.UInt32,System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy.StartRemoteDeployAsync(System.UInt32,System.Object,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAppContainerProjectDeploy">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing.CheckDeveloperLicense(System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing.AcquireDeveloperLicense(System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerDeveloperLicensing.RemoveDeveloperLicense(System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAppContainerDeveloperLicensing">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentHierarchyItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4.GetDocumentProjectGuid(System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService2.GetAsyncTaskContext">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService2.GetTaskScheduler(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult.Succeeded">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperResult.Address">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger.OutputMessage(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.AdviseAppContainerBootstrapperEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.UnadviseAppContainerBootstrapperEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.BootstrapAsync(System.String,System.String,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper.BootstrapForDebuggingAsync(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy2.AdviseAppContainerDeployEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy2.UnadviseAppContainerDeployEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy2.StartDeployAsync(System.UInt32,System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy2.StartRemoteDeployAsync(System.UInt32,System.Object,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeploy2.StartRemoteDeployAsync(System.UInt32,System.Object,System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerProjectDeployCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper2.AdviseAppContainerBootstrapperEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper2.UnadviseAppContainerBootstrapperEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper2.BootstrapAsync(System.String,System.String,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper2.BootstrapForDebuggingAsync(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper2.BootstrapForDiagnosticsAsync(System.String,System.String,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider">
            <summary>
             This interface is safe to access from any thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider.QueryServiceAsync(System.Guid@)">
            <summary>
             This method is safe to access from any thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider2.QueryServiceAsync(System.Guid@,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4.StartWaitDialog(System.String,System.String,System.String,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4.StartWaitDialogWithPercentageProgress(System.String,System.String,System.String,System.Object,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4.EndWaitDialog(System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4.UpdateProgress(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4.HasCanceled(System.Boolean@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4.StartWaitDialogWithCallback(System.String,System.String,System.String,System.Object,System.String,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialogCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog4.StartWaitDialogEx(System.String,System.String,System.String,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IAsyncProgressCallback">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncProgressCallback.ReportProgress(System.Guid@,System.String,System.String,System.Int32,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SAsyncServiceProvider">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IProfferAsyncService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferAsyncService.ProfferAsyncService(System.Guid@,Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferAsyncService.RevokeAsyncService(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferAsyncService.GetServiceProgressCallback">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SProfferAsyncService">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo.ServiceGuid">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo.Name">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo.IsAsync">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo.PackageGuid">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo.HasOverride">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo.OverridePackageGuid">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfoQueryService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfoQueryService.GetServiceInfo(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsServiceInfoQueryService">
            <summary>
            The service represented by this interface is safe to access from any thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IAsyncLoadablePackageInitialize">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncLoadablePackageInitialize.Initialize(Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider,Microsoft.VisualStudio.Shell.Interop.IProfferAsyncService,Microsoft.VisualStudio.Shell.Interop.IAsyncProgressCallback)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper3">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper3.AdviseAppContainerBootstrapperEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper3.UnadviseAppContainerBootstrapperEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper3.BootstrapAsync(System.String,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.VsBootstrapperPackageInfo[],System.Int32,Microsoft.VisualStudio.Shell.Interop.VsBootstrapperPackageInfo[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper3.BootstrapForDebuggingAsync(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper3.BootstrapForDiagnosticsAsync(System.String,System.String,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper4">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper4.AdviseAppContainerBootstrapperEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper4.UnadviseAppContainerBootstrapperEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper4.BootstrapAsync(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.BootstrapMode,System.Int32,Microsoft.VisualStudio.Shell.Interop.VsBootstrapperPackageInfo[],System.Int32,Microsoft.VisualStudio.Shell.Interop.VsBootstrapperPackageInfo[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper4.BootstrapForDebuggingAsync(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.BootstrapMode,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper4.BootstrapForDiagnosticsAsync(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.BootstrapMode,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper5">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper5.AdviseAppContainerBootstrapperEvents(Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper5.UnadviseAppContainerBootstrapperEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper5.BootstrapForDeployingAsync(Microsoft.VisualStudio.Shell.Interop.BootstrappingArchitecture,System.String,Microsoft.VisualStudio.Shell.Interop.BootstrappingMode,System.Int32,Microsoft.VisualStudio.Shell.Interop.VsBootstrapperPackageInfo[],System.Int32,Microsoft.VisualStudio.Shell.Interop.VsBootstrapperPackageInfo[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper5.BootstrapForDebuggingAsync(Microsoft.VisualStudio.Shell.Interop.BootstrappingArchitecture,System.String,Microsoft.VisualStudio.Shell.Interop.BootstrappingMode,System.String,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper5.BootstrapForDiagnosticsAsync(Microsoft.VisualStudio.Shell.Interop.BootstrappingArchitecture,System.String,Microsoft.VisualStudio.Shell.Interop.BootstrappingMode,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper6">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper6.GetRunningStoreApps(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapper6.BootstrapForDebuggingAsUserAsync(Microsoft.VisualStudio.Shell.Interop.BootstrappingArchitecture,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsAppContainerBootstrapperLogger)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable5">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable5.HandsOffDocument(System.UInt32,System.String)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable5.HandsOnDocument(System.UInt32,System.String)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx2">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx2.IgnoreDir(System.String,System.Boolean)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx3">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx3.IgnoreDir(System.String,System.Boolean)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx3.Pause">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx3.Resume">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo2.IsFreeThreaded">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsServiceInfo2.IsCacheable">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsBuiltInServiceInfoQueryService">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo.Name">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo.Id">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo.ProductName">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo.CompanyName">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo.IsBackgroundLoadSafe">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfo.IsLoaded">
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfoQueryService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPackageInfoQueryService.GetPackageInfo(System.Guid@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsPackageInfoQueryService">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsInvalidateCachedCommandState">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInvalidateCachedCommandState.InvalidateCommandUIState">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsInvalidateCachedCommandState.InvalidateSpecificCommandUIState(Microsoft.VisualStudio.Shell.Interop.VSCommandId)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsInvalidateCachedCommandState">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIContextMonitor">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextMonitor.AreUIContextsAvailable">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextMonitor.IsUIContextActive(System.Guid)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextMonitor.AdviseContextEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIContextEvents)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextMonitor.UndaviseContextEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUIContextMonitor">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3.GetUILocale(System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3.GetDialogFont(Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT[])">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3.LoadUILibrary(System.String,System.String,System.UInt32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3.MungeDialogFont(System.UInt32,System.Byte@,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3.LoadDialog(System.IntPtr,System.UInt32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3.GetUILibraryFileName(System.String,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale3.GetDialogFontEx(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT[])">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncUIFactory">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncUIFactory.CreateUIElementAsync(System.Guid@,System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDataSourceFactory">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDataSourceFactory.GetDataSourceAsync(System.Guid@,System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore2.GetPropertyNames(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore2.GetPropertyNamesAndValues(System.String,System.Array@,System.Array@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore2.GetSubCollectionNames(System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProgress">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProgress.Report(System.Double)">
            <summary>
            Reports the progress of an operation.
            </summary>
            <param name="value">The progress of the operation.</param>
            <remarks>
            <para>
            <paramref name="value" /> can be in the range [0.0..1.0], where 0.0 is 0%
            complete and 1.0 is 100% complete.  A value outside that range indicates
            indeterminate progress.
            </para>
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult">
            <summary>
            The result of an asynchronous save operation.  This is the value returned from the
            GetResult method on the asynchronous save's returned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" />.
            </summary>
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.DataLossIncurred">
            <summary>
            This is set to <c>true</c> if the save was successful but there was data loss.
            </summary>
            <remarks>
            <para>
            Setting this to <c>true</c> is similar to returning STG_S_DATALOSS from synchronous
            save operations.
            </para>
            <para>
            This property is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.SaveCanceled">
            <summary>
            This is set to <c>true</c> if the user canceled the save operation.
            </summary>
            <para>
            This property is safe to access from any thread.
            </para>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName">
            <summary>
            The name of the saved file.  This can be <c>null</c> or empty if the name of the
            saved file did not change.
            </summary>
            <para>
            This property is safe to access from any thread.
            </para>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState">
            <summary>
            Optional interface that can be implemented by docdata objects that need to
            preserve state data at the beginning of an aync save operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState.GetAsyncSaveState">
            <summary>
            Returns a state object (such as a checkpoint) for an async save operation.
            </summary>
            <remarks>
            This method is called at the beginning of an asynchronous save. A docdata can
            implement this interface and supply a state object. It can retrieve the state
            object in its implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.SaveAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" /> or
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.SaveAsync(System.String,System.Boolean,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" /> by calling
            IVsAsyncRunningDocumentTable.GetAsyncSaveState.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Saves one or more documents asynchronously.
            </summary>
            <param name="saveOpts">The save options</param>
            <param name="hierarchy">
            The hierarchy that owns the document to save, or <c>null</c>.  This
            parameter is only used if <paramref name="docCookie" /> is VSCOOKIE_NIL
            and <paramref name="itemid" /> is not VSITEMID_SELECTION.  In that case,
            if this parameter is non-null, then the document identified by
            <paramref name="itemid" /> is saved.
            </param>
            <param name="itemid">
            The item identifier for the document to save, or VSITEMID_SELECTION.
            This parameter is only used if <paramref name="docCookie" /> is VSCOOKIE_NIL.
            In that case, if this value is VSITEMID_SELECTION then all selected documents
            are saved.  If this value is not VSITEMID_SELECTION and <paramref name="hierarchy" />
            is non-null, this value must be something other than VSITEMID_NIL.
            </param>
            <param name="docCookie">
            The cookie for the document, or VSCOOKIE_NIL.  If this parameter is not
            VSCOOKIE_NIL, <paramref name="hierarchy" /> and <paramref name="itemid" /> are
            ignored and the document identified by the cookie is saved.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>A task representing the asynchronous operation</returns>
            <remarks>
            <para>
            If <paramref name="docCookie" /> is VSCOOKIE_NIL, <paramref name="itemid" />
            is not VSITEMID_SELECTION, and <paramref name="hierarchy" /> is <c>null</c>,
            all dirty documents are saved.
            </para>
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)">
            <summary>
            Retrieves the state object (such as a checkpoint) for an async save operation.
            </summary>
            <param name="provider">The provider of the state object.</param>
            <remarks>
            <para>
            This method is called from a docdata's implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.SaveAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" />
            or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.SaveAsync(System.String,System.Boolean,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" /> to fetch the state object supplied by
            <paramref name="provider" /> in its implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState.GetAsyncSaveState" />.
            </para>
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.UpdateAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState,System.Object)">
            <summary>
            Updates the state object (such as a checkpoint) for an async save operation.
            </summary>
            <param name="provider">The provider of the state object.</param>
            <param name="saveState">The provider's updated state object.</param>
            <remarks>
            <para>
            A provider  might want to do this if the state object changed, say, while processing the
            OnBeforeSave or OnBeforeSaveAsync event.
            </para>
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.UnlockDocumentAsync(System.UInt32,System.UInt32)">
            <summary>
            Removes a lock from a document.
            </summary>
            <param name="lockType">The type of lock to remove.</param>
            <param name="docCookie">The document cookie.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable3">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable3.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable3.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable3.UpdateAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState,System.Object)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.UpdateAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState,System.Object)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable3.UnlockDocumentAsync(System.UInt32,System.UInt32)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.UnlockDocumentAsync(System.UInt32,System.UInt32)" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable3.IsAsyncSaveEnabled">
            <summary>
            Indicates whether asynchronous saves are enabled.
            </summary>
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShell">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShell.SaveDocDataToFileAsync(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.Object,System.String,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Saves a docdata to a file asynchronously.
            </summary>
            <param name="flags">The save flags.</param>
            <param name="persistFile">The file in which the docdata is to be saved.</param>
            <param name="untitledPath">
            File path to which the doc data for an as-yet unsaved document is to be saved.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.
            </returns>
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSolution">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSolution.SaveSolutionElementAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Saves a solution element asynchronously.
            </summary>
            <param name="saveOpts">The save options.</param>
            <param name="hierarchy">The hierarchy.</param>
            <param name="docCookie">The document cookie.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistHierarchyItem">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistHierarchyItem.SaveItemAsync(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.Object,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Saves a hierarchy item, asynchronously.
            </summary>
            <param name="flags">The save flags.</param>
            <param name="silentSaveAsName">
            The file name to be applied when <paramref name="flags" /> is set to VSSAVE_SilentSave.
            </param>
            <param name="itemid">The ID of the hierarchy item to be saved.</param>
            <param name="docData">The document data of the item to be saved.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.  The <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName" />
            property is unused.
            </returns>
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistHierarchyItem.ReloadItemAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Reloads a hierarchy item, asynchronously.
            </summary>
            <param name="itemid">The ID of the hierarchy item to be reloaded.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.
            </returns>
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData.LoadDocDataAsync(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Loads the document data for a given document, asynchronously.
            </summary>
            <param name="moniker">The moniker for the document to be loaded.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData.SaveDocDataAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Saves the document data, asynchronously.
            </summary>
            <param name="flags">The save flags</param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData.ReloadDocDataAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Reloads the document data asynchronously and in the process determines whether to ignore
            a subsequent file change.
            </summary>
            <param name="flags">
            Flag indicating whether to ignore the next file change when reloading the document data.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.LoadAsync(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Opens a specified file asynchronously and initializes an object from the file contents.
            </summary>
            <param name="filename">The name of the file to load.</param>
            <param name="grfMode">
            File format mode. If zero, the object uses the usual defaults as if the user had opened the file.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.SaveAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Saves a copy of the object to the specified file, asynchronously.
            </summary>
            <param name="filename">
            The file name. This parameter can be <c>null</c>, in which case the object is saved to its
            current file. If the object is in the untitled state and <paramref name="filename" /> is <c>null</c>,
            <see cref="T:System.ArgumentException" /> is thrown.
            </param>
            <param name="remember">
            Indicates whether <paramref name="filename" /> is to be used as the current working file.  If
            <c>true</c>, <paramref name="filename" /> becomes the current file and the object should clear
            its dirty flag after the save. If <c>false</c>, this save operation is a Save a Copy As operation.
            In this case, the current file is unchanged and the object does not clear its dirty flag.
            If <paramref name="filename" /> is <c>null</c>, <paramref name="remember" /> is ignored.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.  The <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName" />
            property is unused.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.LoadAsync(System.String,System.UInt32,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Opens a specified file asynchronously and initializes an object from the file contents.
            </summary>
            <param name="filename">The name of the file to load.</param>
            <param name="grfMode">
            File format mode. If zero, the object uses the usual defaults as if the user had opened the file.
            </param>
            <param name="readOnly">
            A value of <c>true</c> indicates that the file should be opened as read-only.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.SaveAsync(System.String,System.Boolean,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
            <summary>
            Saves a copy of the object to the specified file, asynchronously.
            </summary>
            <param name="filename">
            The file name. This parameter can be <c>null</c>, in which case the object is saved to its
            current file. If the object is in the untitled state and <paramref name="filename" /> is <c>null</c>,
            <see cref="T:System.ArgumentException" /> is thrown.
            </param>
            <param name="remember">
            Indicates whether <paramref name="filename" /> is to be used as the current working file.  If
            <c>true</c>, <paramref name="filename" /> becomes the current file and the object should clear
            its dirty flag after the save. If <c>false</c>, this save operation is a Save a Copy As operation.
            In this case, the current file is unchanged and the object does not clear its dirty flag.
            If <paramref name="filename" /> is <c>null</c>, <paramref name="remember" /> is ignored.
            </param>
            <param name="formatIndex">
            A value that indicates the format in which the file will be saved. The caller passes <c>DEF_FORMAT_INDEX</c>
            if the object is to choose its default (current) format. Otherwise, the value is interpreted as the index
            into the list of formats, as returned by a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetFormatList(System.String@)" />
            method. An index value of 0 indicates the first format, 1 the second format, and so on.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.  The <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName" />
            property is unused.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVENOTIFICATIONFLAGS">
            <summary>
            A set of flags that describe attributes about a given save.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable6">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable6.NotifyOnBeforeSave(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <summary>
            Notifies event listeners that a save is about to occur.
            </summary>
            <param name="cookie">The document cookie.</param>
            <param name="saveNotificationFlags">Provides additional information about the save.</param>
            <param name="saveTask">A task representing the save operation.</param>
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable6.NotifyOnAfterSave(System.UInt32,System.UInt32)">
            <summary>
            Notifies event listeners that a save has occurred.
            </summary>
            <param name="cookie">The document cookie.</param>
            <param name="saveNotificationFlags">Provides additional information about the save.</param>
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents7">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents7.OnBeforeSaveAsync(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <summary>
            Called right before a save is about to occur.
            </summary>
            <param name="cookie">The document cookie.</param>
            <param name="flags">Provides additional information about the save.</param>
            <param name="saveTask">A task representing the save operation.</param>
            <returns>
            An optional task representing async work done by the event sink.  If this is non-null,
            the RunningDocTable will await its completion before continuing the save.
            </returns>
            <remarks>
            <para>
            When the RunningDocTable notifies the event sink about save events, it will first check if the event implements this
            interface and call this method. If not, it will check if it implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3" />
            and call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeSave(System.UInt32)" />. Note that this means the RDT will not call both methods.
            </para>
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents7.OnAfterSaveAsync(System.UInt32,System.UInt32)">
            <summary>
            Called right after a save has occurred.
            </summary>
            <param name="cookie">The document cookie.</param>
            <param name="flags">Provides additional information about the save.</param>
            <returns>
            An optional task representing async work done by the event sink.  If this is non-null,
            the RunningDocTable will await its completion before continuing the save.
            </returns>
            <remarks>
            When the RunningDocTable notifies the event sink about save events, it will first check if the event implements this
            interface and call this method. If not, it will check if it implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3" />
            and call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterSave(System.UInt32)" />. Note that this means the RDT will not call both methods.
            <para>
            This method is safe to access from any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSTATUSBARANIMATIONINDEX">
            <summary>
            A set of built in status bar animation indices.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID12.VSSPROPID_ShutdownStarting">
            <summary>
            This property will be set to true after any required pre-close checks have been passed (files saved),
            but before any shutdown work has begun (like solution close)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID13.VSSPROPID_EnableEnhancedTooltips">
            <summary>
            This property controls whether the enhanced tooltip behavior (tooltip will show on focus) is enabled in VS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID13.VSHPROPID_SlowEnumeration">
            <summary>
            This property indicates that a hierarchy and its nested items may be slow to be enumerated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncCommandParameters">
            <summary>
            An instance of this interface is sent as the input argument to commands with the <c>AsyncFromUIInvocation</c>,
            when they are executed by a UI gesture such as a menu command, toolbar button, or key binding.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncCommandParameters.ShouldRunAsync">
            <summary>
            Indicates whether the command should be run asynchronously
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncCommandParameters.OriginalArgument">
            <summary>
            The original argument to the command invocation, or <c>null</c> if none was specified.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS2">
            <summary>
            Adds to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS" /> enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS2.FCF_ONLYFIXEDPITCHFONTS">
            <summary>
            Restricts the Font dropdown box of the Fonts and Colors property page to presenting only Fixed Pitch fonts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS2">
            <summary>
            Adds to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS" /> enumaration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS2.FCSF_AVOIDPACKAGELOAD">
            <summary>
            Avoids loading packages when opening a category.
            This is useful when retrieving font and color info that don't require package loads.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen">
            <summary>
            Provides the ability to asynchronously open items in a project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.OpenItemAsync(System.UInt32,System.Guid,System.Boolean,System.Object)">
             <summary>
             Asynchronously opens an item in the project.
             </summary>
             <param name="itemId">
                 Identifier of the item to open.
                 Should be <c>VSITEMID_ROOT</c> or other valid item identifier.
                 See the <c>VSITEMID</c> enumeration.
             </param>
             <param name="logicalView">
                 Unique identifier of the logical view.
                 If not <c>GUID_NULL</c>, indicates a specific type of view to create.
                 For more information, see the <c>LOGVIEWID</c>.
             </param>
             <param name="shouldGetDocDataFromRdt">
                 If <c>true</c>, then the environment will use the doc data object obtained from the Running Document Table;
                 otherwise, the service will open the document using the doc data passed in to <paramref name="docData" />.
             </param>
             <param name="docData">
                 A reference to the document data object of the item to open or <c>null</c>. This value passed into this parameter is ignored
                 if <paramref name="shouldGetDocDataFromRdt" /> is <c>true</c>.
             </param>
             <returns>
                 A task representing the open operation. The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" /> for the opened item.
             </returns>
             <remarks>
                 By implementing <c>IVsProjectSpecificEditorMap2</c> interface on your project object, you can do project-specific handling of files.
                 That is, you can support either opening the file in a project-specific editor or allowing the global editor to open the item.
                 Opening an item requires launching an editor using <c>OpenStandardEditorAsync(...)</c> or <c>OpenSpecificEditorAsync(...)</c>, depending on the handling you want to implement.
                 For more information, see <c>GetSpecificEditorProperty</c>.
            
                 NOTE: In your implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.OpenItemAsync(System.UInt32,System.Guid,System.Boolean,System.Object)" />, do not call <c>Show()</c> on the window frame you return.
            
                 Compare to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.ReopenItemAsync(System.UInt32,System.Guid,System.String,System.Guid,System.Boolean,System.Object)" />
            
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.ReopenItemAsync(System.UInt32,System.Guid,System.String,System.Guid,System.Boolean,System.Object)">
             <summary>
             Asynchronously reopens an item in the project.
             </summary>
             <param name="itemId">
                 Identifier of the item to open.
                 Should be <c>VSITEMID_ROOT</c> or other valid item identifier.
                 See the <c>VSITEMID</c> enumeration.
             </param>
             <param name="editorType">
                 Unique identifier of the editor type.
             </param>
             <param name="physicalView">
                  Name of the physical view. If set to null, <c>MapLogicalView</c> will be called.
             </param>
             <param name="logicalView">
                 Unique identifier of the logical view.
                 If not <c>GUID_NULL</c>, indicates a specific type of view to create.
                 For more information, see the <c>LOGVIEWID</c>.
             </param>
             <param name="shouldGetDocDataFromRdt">
                 If <c>true</c>, then the environment will use the doc data object obtained from the Running Document Table;
                 otherwise, the service will open the document using the doc data passed in to <paramref name="docData" />.
             </param>
             <param name="docData">
                 A reference to the document data object of the item to open or <c>null</c>. This value passed into this parameter is ignored
                 if <paramref name="shouldGetDocDataFromRdt" /> is <c>true</c>.
             </param>
             <returns>
                 A task representing the reopen operation. The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" /> for the reopened item.
             </returns>
             <remarks>
                 Similar to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.OpenItemAsync(System.UInt32,System.Guid,System.Boolean,System.Object)" /> except that you call <c>OpenSpecificEditorAsync</c> (rather than the <c>OpenStandardEditorAsync</c>).
            
                 Implement <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.ReopenItemAsync(System.UInt32,System.Guid,System.String,System.Guid,System.Boolean,System.Object)" /> to handle automatic reopening of files that belong to a project.
                 For example, when a user adds files to a project type that you created, closes the project and later reopens it,
                 implement <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.ReopenItemAsync(System.UInt32,System.Guid,System.String,System.Guid,System.Boolean,System.Object)" /> to also open the files that belong to the new project type.
            
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.OpenItemWithSpecificAsync(System.UInt32,System.UInt32,System.Guid,System.String,System.Guid,System.Boolean,System.Object)">
             <summary>
             Asynchronously opens an item using a specific editor.
             </summary>
             <param name="itemId">
                 Identifier of the item to open.
                 Should be <c>VSITEMID_ROOT</c> or other valid item identifier.
                 See the <c>VSITEMID</c> enumeration.
             </param>
             <param name="editorFlags">
                 Flags whose values are taken from the <c>__VSSPECIFICEDITORFLAGS</c> enumeration.
             </param>
             <param name="editorType">
                 Unique identifier of the editor type.
             </param>
             <param name="physicalView">
                  Name of the physical view. If set to null, <c>MapLogicalView</c> will be called.
             </param>
             <param name="logicalView">
                 Unique identifier of the logical view.
                 If not <c>GUID_NULL</c>, indicates a specific type of view to create.
                 For more information, see the <c>LOGVIEWID</c>.
             </param>
             <param name="shouldGetDocDataFromRdt">
                 If <c>true</c>, then the this method will use the doc data object obtained from the Running Document Table;
                 otherwise, the service will open the document using the doc data passed in to <paramref name="docData" />.
             </param>
             <param name="docData">
                 A reference to the document data object of the item to open or <c>null</c>. This value passed into this parameter is ignored
                 if <paramref name="shouldGetDocDataFromRdt" /> is <c>true</c>.
             </param>
             <returns>
                 A task representing the reopen operation. The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" /> for the reopened item.
             </returns>
             <remarks>
                 This method is used to ask the project to open the item (document) using the specified editor information.
                 It is an extension of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectAsyncOpen.OpenItemAsync(System.UInt32,System.Guid,System.Boolean,System.Object)" />.
            
                 It is implemented in conjunction with <c>OpenSpecificEditorAsync</c>.
            
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.MARKERTYPE4">
            <summary>
            This enum continues from MARKERTYPE3. See MARKERTYPE3 for earlier values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID14.VSSPROPID_ShutdownReason">
            <summary>
            This property indicates the reason that the product is shutting down. e.g. by Windows restart.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument">
            <summary>
            A service interface that provides a set of methods to asynchronously open documents.
            </summary>
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument.OpenSpecificEditorAsync(System.UInt32,System.String,System.Guid,System.String,System.Guid,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Boolean,System.Object,Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
             <summary>
             Asynchronously opens a document using the specified editor.
             </summary>
             <param name="openSpecificEditorFlags">
                 Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS" /> enumeration.
             </param>
             <param name="documentMoniker">
                 String form of the unique moniker identifier of the document in the project system, for example, the full path to the file.
                 In non-file cases, this identifier is often in the form of a URL.
             </param>
             <param name="editorType">
                 A <see cref="T:System.Guid" /> that identifies to editor be used to open the file.
             </param>
             <param name="physicalView">
                 Name of the physical view or <c>null</c>.
            
                 If <c>null</c>, the environment calls <c>MapLogicalView(Guid, String)</c> on the editor factory to determine the physical view that corresponds to the logical view.
                 In this case, <c>null</c> does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view.
             </param>
             <param name="logicalView">
                 A <see cref="T:System.Guid" /> identifying the logical view. The default view is <c>VSConstants.LOGVIEWID_Primary</c> and every editor must support that view.
            
                 If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed to
                 <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.ActivateLogicalView(System.Guid@)" />, which determines which view is activated when the editor window is shown.
            
                 By specifying the logical view <see cref="T:System.Guid" />, you can request the specific view that matches the reason you are requesting the view.
                 For example, specify <c>VSConstants.LOGVIEWID_Debugging</c> to get the view appropriate for debugging, or <c>VSConstants.LOGVIEWID_TextView</c> to get the view
                 appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).
             </param>
             <param name="ownerCaption">
                 Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."
             </param>
             <param name="hierarchy">
                 A reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> that owns the document.
             </param>
             <param name="itemId">
                 The UI hierarchy item identifier of the standard editor. For more information see <c>VSConstants.VSITEMID</c>.
             </param>
             <param name="shouldGetDocDataFromRdt">
                 If <c>true</c>, then the environment will use the doc data object obtained from the Running Document Table;
                 otherwise, the service will open the document using the doc data passed in to <paramref name="docData" />.
             </param>
             <param name="docData">
                 A reference to the document data object of the item to open or <c>null</c>. This value passed into this parameter is ignored
                 if <paramref name="shouldGetDocDataFromRdt" /> is <c>true</c>.
             </param>
             <param name="serviceProvider">
                 A reference to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.
             </param>
             <returns>
                 A task representing that the open operation has started.
                 The result of the task is a reference to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" />, if the document was opened within the environment; otherwise, <c>null</c>.
             </returns>
             <remarks>
             <para>
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </para>
             <para>
                 This method  must be accessed on the main thread.
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument.OpenStandardEditorAsync(System.UInt32,System.String,System.Guid,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Boolean,System.Object,Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
             <summary>
                 Opens a file using the standard editor. It will first determine whether a default editor factory for the file is
                 already configured. If a default is not already configured, then it will loop through a priority-sorted
                 list of editor factories to find the first one that supports the document.
                 An exception is thrown if the document cannot be opened.
             </summary>
             <param name="openStandardEditorFlags">
                 Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS" /> or <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS2" /> enumeration.
             </param>
             <param name="documentMoniker">
                 String form of the unique moniker identifier of the document in the project system, for example, the full path to the file.
                 In non-file cases, this identifier is often in the form of a URL.
             </param>
             <param name="logicalView">
                 A <see cref="T:System.Guid" /> identifying the logical view. The default view is <c>VSConstants.LOGVIEWID_Primary</c> and every editor must support that view.
            
                 If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed to
                 <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.ActivateLogicalView(System.Guid@)" />, which determines which view is activated when the editor window is shown.
            
                 By specifying the logical view <see cref="T:System.Guid" />, you can request the specific view that matches the reason you are requesting the view.
                 For example, specify <c>VSConstants.LOGVIEWID_Debugging</c> to get the view appropriate for debugging, or <c>VSConstants.LOGVIEWID_TextView</c> to get the view
                 appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).
             </param>
             <param name="ownerCaption">
                 Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."
             </param>
             <param name="hierarchy">
                 A reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> that owns the document.
             </param>
             <param name="itemId">
                 The UI hierarchy item identifier of the standard editor. For more information see <c>VSConstants.VSITEMID</c>.
             </param>
             <param name="shouldGetDocDataFromRdt">
                 If <c>true</c>, then the environment will use the doc data object obtained from the Running Document Table;
                 otherwise, the service will open the document using the doc data passed in to <paramref name="docData" />.
             </param>
             <param name="docData">
                 A reference to the document data object of the item to open or <c>null</c>. This value passed into this parameter is ignored
                 if <paramref name="shouldGetDocDataFromRdt" /> is <c>true</c>.
             </param>
             <param name="serviceProvider">
                 A reference to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.
             </param>
             <returns>
                 A task representing that the open operation has started.
                 The result of the task is a reference to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" />, if the document was opened within the environment; otherwise, <c>null</c>.
             </returns>
             <remarks>
             <para>
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </para>
             <para>
                 This method uses the result of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> to determine whether it should continue
                 looping to the next editor in the list to find a supported editor factory. Specifically, it should return one of the following:
                     1. <c>S_OK</c> to indicate that it should stop looping if the editor supports the file and was successfully initialized
                     2. <c>"VS_E_UNSUPPORTEDFORMAT"</c> to indicate that it should continue looping if the editor does not support the provided doc data
                     3. Any other error code to indicate that it should stop looping.
             </para>
             <para>
                 This method  must be accessed on the main thread.
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument.OpenDocumentViaProjectAsync(System.String,System.Guid,System.Boolean)">
             <summary>
                 Finds an appropriate project to open the document.
             </summary>
             <param name="documentMoniker">
                  String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.
             </param>
             <param name="logicalView">
                 A <see cref="T:System.Guid" /> identifying the logical view. The default view is <c>VSConstants.LOGVIEWID_Primary</c> and every editor must support that view.
            
                 If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed to
                 <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.ActivateLogicalView(System.Guid@)" />, which determines which view is activated when the editor window is shown.
            
                 By specifying the logical view <see cref="T:System.Guid" />, you can request the specific view that matches the reason you are requesting the view.
                 For example, specify <c>VSConstants.LOGVIEWID_Debugging</c> to get the view appropriate for debugging, or <c>VSConstants.LOGVIEWID_TextView</c> to get the view
                 appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).
             </param>
             <param name="supportExternalItems">
                 <c>true</c> if the project supports external items; otherwise, <c>false</c>.
             </param>
             <returns>
                 A task representing the open operation.
                 The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" /> object.
             </returns>
             <remarks>
             <para>
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </para>
             <para>
                 This can be called to open any project that is opened through the New Project or Open Project dialog box.
                 In addition, this method is also called to open a document in any project that is added to the solution through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProjectEx(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid@)" />.
                 One example use of this is the DataView hierarchy, which is currently in Server Explorer.
                 If a DataView hierarchy is added to the solution as a virtual project using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)" />, then this method can open items from DataView hierarchies.
                 This functionality is important as it makes debugging of stored procedures possible.
             </para>
             <para>
                 This method  must be accessed on the main thread.
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument.OpenDocumentViaProjectWithSpecificAsync(System.String,System.UInt32,System.Guid,System.String,System.Guid)">
             <summary>
                 Finds a specified project to open this document.
             </summary>
             <param name="documentMoniker">
                 String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.
             </param>
             <param name="specificEditorFlags">
                 Flags whose values are taken from the __VSSPECIFICEDITORFLAGS enumeration.
             </param>
             <param name="editorType">
                 Unique identifier of the editor type.
             </param>
             <param name="physicalView">
                 Unique identifier of the physical view.
             </param>
             <param name="logicalView">
                 A <see cref="T:System.Guid" /> identifying the logical view. The default view is <c>VSConstants.LOGVIEWID_Primary</c> and every editor must support that view.
            
                 If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed to
                 <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.ActivateLogicalView(System.Guid@)" />, which determines which view is activated when the editor window is shown.
            
                 By specifying the logical view <see cref="T:System.Guid" />, you can request the specific view that matches the reason you are requesting the view.
                 For example, specify <c>VSConstants.LOGVIEWID_Debugging</c> to get the view appropriate for debugging, or <c>VSConstants.LOGVIEWID_TextView</c> to get the view
                 appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).
             </param>
             <returns>
                 A task representing the open operation.
                 The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" /> object.
             </returns>
             <remarks>
             <para>
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </para>
             <para>
                 This method is used by VSPackages that are not projects that need to open a document in a specific editor, but do not care which project opens the file.
                 To call this method from your VSPackage, you need to know exactly which editor factory you want and exactly which window you want the editor factory to create (that is, the physical view).
                 The logical view specified in the <paramref name="logicalView" /> parameter further allows you to specify which tab should be displayed by the editor if the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" />.
             </para>
             <para>
                 This method calls <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.OpenItem(System.UInt32,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />. If no project can service the file and the Miscellaneous Files project is not already present,
                 the environment then creates the Miscellaneous Files project and tries again.
             </para>
             <para>
                 This method must be accessed on the main thread.
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument.OpenCopyOfStandardEditorAsync(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.Guid)">
             <summary>
                 Used to implement Window.NewWindow functionality.
             </summary>
             <param name="originalWindowFrame">
                 Pointer to the original window frame to clone.
             </param>
             <param name="logicalView">
                 A <see cref="T:System.Guid" /> identifying the logical view. The default view is <c>VSConstants.LOGVIEWID_Primary</c> and every editor must support that view.
            
                 If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed to
                 <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView.ActivateLogicalView(System.Guid@)" />, which determines which view is activated when the editor window is shown.
            
                 By specifying the logical view <see cref="T:System.Guid" />, you can request the specific view that matches the reason you are requesting the view.
                 For example, specify <c>VSConstants.LOGVIEWID_Debugging</c> to get the view appropriate for debugging, or <c>VSConstants.LOGVIEWID_TextView</c> to get the view
                 appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).
             </param>
             <returns>
                 A task representing the open operation.
                 The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult" /> object.
                 The value of <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.WindowFrame" /> is a reference to a new, cloned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> based on <paramref name="originalWindowFrame" />.
             </returns>
             <remarks>
             <para>
                 The task returned by this method does not indicate that the document's view and docdata have been loaded. See <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask" /> for more details.
             </para>
             <para>
                 Editors should handle cmdidNewWindow command by calling this method.
             </para>
             <para>
                 This method must be accessed on the main thread.
             </para>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument.GetProvisionalViewingStatusForFileAsync(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid)">
            <summary>
                Gets the provisional viewing status for a file.
            </summary>
            <param name="fileName">
                The name of the file.
            </param>
            <param name="hierarchy">
                The hierarchy of the item.
            </param>
            <param name="itemId">
                The item identifier of the item.
            </param>
            <param name="logicalView">
                The logical view to query.
            </param>
            <returns>
                A task representing the query operation.
                The result of the task is a member of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROVISIONALVIEWINGSTATUS" /> enumeration that describes how the file can be opened in the preview tab.
                The default provisional viewing status is PVS_Disabled, but can be modified by the editor's "CommonPhysicalViewAttributes" registry value and the values under its "PhysicalViewAttributes" registry subkey.
            </returns>
            <remarks>
            <para>
                The physical view attributes – which declare if and how the physical view supports provisional viewing (that is, previewing) – are properties of the editor.
                In addition to physical view attributes, editors also declare what file types they can edit (for example, *.cs, *.xml, and so on) and the relative “rank” of the editor.
                Multiple editors can declare that they support the same file type and the environment then chooses the one with the highest rank to open the file.
            </para>
            <para>
                This method must be accessed on the main thread.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShellOpenDocument.GetProvisionalViewingStatusForEditorAsync(System.Guid,System.Guid)">
            <summary>
                Retrieves the provisional viewing status for an editor and logical view combination.
            </summary>
            <param name="editorType">
                The editor to query.
            </param>
            <param name="logicalView">
                The hierarchy of the item.
            </param>
            <returns>
                A task representing the query operation.
                The result of the task is a member of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROVISIONALVIEWINGSTATUS" /> enumeration that describes how the file can be opened in the preview tab.
                The default provisional viewing status is PVS_Disabled, but can be modified by the editor's "CommonPhysicalViewAttributes" registry value and the values under its "PhysicalViewAttributes" registry subkey.
            </returns>
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult">
            <summary>
                Represents the result of an asynchronous open document operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.Hierarchy">
            <summary>
            Gets the hierarchy associated with the <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.WindowFrame" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.ItemId">
            <summary>
            Gets the ID of the selected item in the associated <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.Hierarchy" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.WindowFrame">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> associated with the opened document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.DocumentLoadTask">
            <summary>
            Gets the task that represents the work of loading the <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncOpenDocumentResult.WindowFrame" />.
            The docdata and docview are fully initialized when this task successfully runs to completion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDeferredDocView.LoadDocViewAsync(System.Object)">
            <summary>
            Asynchronously loads the document view's after the environment has loaded the document data.
            </summary>
            <param name="docData">
                The docdata object provided by the editor factory.
            </param>
            <returns>
            A task that represents the asynchronous operation of loading the document view. The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDocViewResult" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDeferredDocView2.LoadDocViewAsync(System.Object,System.Guid)">
            <summary>
            Asynchronously loads the document view's after the environment has loaded the document data.
            </summary>
            <param name="docData">
                The docdata object provided by the editor factory.
            </param>
            <param name="commandUIContext">
                The command UI context provided by the editor factory.
            </param>
            <returns>
            A task that represents the asynchronous operation of loading the document view. The result of the task is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDocViewResult" />.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDocViewResult.LoadedDocView">
            <summary>
            Gets the object that window frame should use for its view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncDocViewResult.CmdUIGuid">
            <summary>
            Gets the command UI context that window frame should use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore3.GetStrings(System.String,System.String,System.Array@)">
            <summary>
            Returns an array of strings from a multi-string entry in the settings store.
            </summary>
            <param name="collectionPath">The collection path.</param>
            <param name="propertyName">The property name.</param>
            <param name="values">The strings from a multi-string entry.</param>
            <returns>The HRESULT for the operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUnifiedSettingsObserverFactory">
            <summary>
            A factory interface for creating objects that observe changes to Unified Settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUnifiedSettingsObserverFactory.CreateSettingsObserver(System.Guid)">
            <summary>
            Instantiates Unified Settings observer identified by the given guid.
            </summary>
            <param name="guid">The <see cref="T:System.Guid" /> identifying the observer type.</param>
            <returns>
            The Unified Settings observer, or <see langword="null" /> if <paramref name="guid" /> is not supported.
            </returns>
            <remarks>
            This factory method should subscribe to settings changes for the observer object before returning.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncUnifiedSettingsObserverFactory">
            <summary>
            An asynchronous factory interface for creating objects that observe changes to Unified Settings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncUnifiedSettingsObserverFactory.CreateSettingsObserverAsync(System.Guid)">
            <summary>
            Instantiates Unified Settings observer identified by the given guid.
            </summary>
            <param name="guid">The <see cref="T:System.Guid" /> identifying the observer type.</param>
            <returns>
            A task whose result is is either:
            <list type="bullet">
            <item>
            The Unified Settings observer, or
            </item>
            <item>
            <see langword="null" />, if <paramref name="guid" /> is not supported.
            </item>
            </list>
            </returns>
            <remarks>
            This factory method should subscribe to settings changes for the observer object before returning.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGSUPPER">
            <summary>
                Flags that describe the state of a document in the Running Document Table.
            </summary>
            <remarks>
                These flags are an extension of the flags from the <c>VSRDTFLAGS</c> enumeration.
                The flag values from <c>VSRDTFLAGSUPPER</c> may have the same values as the flags from <c>VSRDTFLAGS</c>.
                These flags from both enumerations should not be directly combined in the same 32-bit integer.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGSUPPER.RDT_InitializationFailed">
            <summary>
                Indicates that a document failed to initialize.
            </summary>
            <remarks>
                The docdata is invalid and won't get returned by the Running Document Table.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID12.VSFPROPID_LoadingTask">
            <summary>
            This property is an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" />.
            The task represents the operation of initializing and loading a deferred frame.
            A completed task is always returned for non-deferred document frames.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID12.VSFPROPID_IsDocDataInitialized">
            <summary>
            This property is a <see langword="bool" />.
            This is <see langword="true" /> if the DocData has been initialized on the frame; otherwise, <see langword="false" />.
            </summary>
            <remarks>
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameEvents3.OnFrameDocDataInitializedAsync(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.Object)" /> gets called after this becomes <see langword="true" />.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID12.VSFPROPID_IsDocViewInitialized">
            <summary>
            This property is a <see langword="bool" />.
            This is <see langword="true" /> if the DocView has been initialized on the frame; otherwise, <see langword="false" />.
            </summary>
            <remarks>
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameEvents3.OnFrameDocViewInitialized(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.Object)" /> gets called after this becomes <see langword="true" />.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW5.FRAMESHOW_LoadingWindowActivated">
            <summary>
            Indicates that a loading frame has been activated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW5.FRAMESHOW_LoadingWindowShown">
            <summary>
            Indicates that a loading frame has been shown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents8.OnBeforeLoadingDocumentWindowShow(System.UInt32,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Notifies that a loading document frame that has been shown.
            </summary>
            <param name="documentCookie">The Running Document Table cookie associated with this frame.</param>
            <param name="isFirstShow"> <see langword="true" /> if this is the first time this event has been fired for this frame; otherwise, <see langword="false" />.</param>
            <param name="documentFrame">The document frame that's about to be shown.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable4">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable4.GetDocumentDataAsync(System.UInt32)">
            <summary>
            Gets the document data (docdata) from the Running Document Table for the given <paramref name="documentCookie" />.
            </summary>
            <param name="documentCookie">The document's ID in Running Document Table.</param>
            <returns>
            A task that represents the operation of retrieving the docdata from the Running Document Table.
            The result of the task is the docdata.
            </returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable7">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable7.GetDocumentFlagsEx(System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
                Returns the Running Document Table flags set on the specified document.
            </summary>
            <param name="docCookie">
                The document's unique identifier in the Running Document Table.
            </param>
            <param name="upperFlags">
                Flags from the <c>VSRDTFLAGSUPPER</c> enumeration.
            </param>
            <param name="lowerFlags">
                Flags from the <c>VSRDTFLAGS</c> enumeration.
            </param>
            <remarks>
                This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameEvents3.OnFrameDocDataInitializedAsync(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.Object)">
            <summary>
            Called when the when the DocData has been initialized on the frame.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameEvents3.OnFrameDocViewInitialized(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.Object)">
            <summary>
            Called when the when the DocView has been initialized on the frame.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS3.OSE_AvoidExternalEditors">
            <summary>
            Indicates that the document should be opened within the IDE.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.UIContextState">
            <summary>
            Describes the state of a given UI context.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextState.NeverSet">
            <summary>
            The UI context is unknown to the system. This means it has never been set. Unknown UI contexts are implicitly considered to have a state of <see cref="F:Microsoft.VisualStudio.Shell.Interop.UIContextState.Inactive" />. If all you care about is active or not, this can be considered Inactive. Though this value allows you to differentiate a UI context having been set to inactive vs being implicitly inactive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextState.Active">
            <summary>
            The UI context is set to an active state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextState.Inactive">
            <summary>
            The UI context is set to an inactive state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager">
            <summary>
            Exposes the VS UI context subsystem.
            </summary>
            <remarks>
            This interface is safe to access from any thread except for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager.SetUIContextState(System.Guid@,System.Boolean)" /> which must occur on the UI thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager.AreUIContextsAvailable">
            <summary>
            Returns a value indicating whether the UI context subsystem is available. This is generally <see langword="true" /> except in UI-less scenarios.
            </summary>
            <returns><see langword="true" /> if the UI context subsystem is available, otherwise <see langword="false" />.</returns>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager.GetUIContextState(System.Guid@)">
            <summary>
            Gets the current state of the given UI context.
            </summary>
            <param name="uiContext">The UI context whose state you want to retrieve.</param>
            <returns>A value from <see cref="T:Microsoft.VisualStudio.Shell.Interop.UIContextState" /> indicating the present state of the UI context identified by <paramref name="uiContext" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager.SetUIContextState(System.Guid@,System.Boolean)">
            <summary>
            Sets the given UI context to the state given in <paramref name="isActive" />.
            </summary>
            <param name="isActive">A boolean value indicating if the UI context specified in <paramref name="uiContext" /> should be considered active or not.</param>
            <param name="uiContext">The <see cref="T:System.Guid" /> identifying the UI context to activate/deactivate.</param>
            <remarks>
            This method must be called from the UI thread or it will fail with a <see cref="T:System.Runtime.InteropServices.COMException" /> whose HRESULT will be RPC_E_WRONG_THREAD.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager.AdviseUIContextEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIContextEvents)">
            <summary>
            Advises for change events for all UI contexts.
            </summary>
            <param name="callback">The callback to invoke when a UI context value changes.</param>
            <returns>A cookie representing your subscription.</returns>
            <remarks>
            This method is safe to access from any thread, though do be aware that if this method is called off the UI thread while a context is actively being set on the UI thread, the registered callback may miss the change notification.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager.AdviseSpecificUIContextEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIContextEvents,System.Guid@)">
            <summary>
            Advises callback events for the given UI context.
            </summary>
            <param name="callback">The callback to invoke when the given UI context activation state changes, if we end up subscribing to change events.</param>
            <param name="uiContext">The identifier of the UI context whose change events you want to subscribe to if it's not active.</param>
            <returns>A cookie representing your subscription.</returns>
            <remarks>
            This method is safe to access from any thread, though do be aware that if this method is called off the UI thread while a context is actively being set on the UI thread, the registered callback may miss the change notification.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIContextManager.UnadviseUIContextEvents(System.UInt32)">
            <summary>
            Unadvises change events.
            </summary>
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUIContextManager">
            <summary>
            The service identifier of the service representing the VS UI context subsystem.
            </summary>
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedPackageLoadEvents">
            <summary>
            This can be used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsShell8.AdviseFreeThreadedPackageLoadEvents(Microsoft.VisualStudio.Shell.Interop.IVsFreeThreadedPackageLoadEvents)" /> to advise for package load events that are delievered on the thread the package load completes on. The legacy (see cref="IVsPackageLoadEvents"/&gt;) interface always would
            have events delivered on the UI thread even if the package load itself was entirely on a background thread.
            </summary>
            <remarks>
            Implementations of this interface must be safe to receive callbacks from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsShell8">
            <summary>
            Exposes a way to sign up for package load events that are free-threaded. Callbacks for these events will occur on the thread the package load completes on (not necessarily the UI thread).
            </summary>
            <remarks>
            Methods on this interface must be accessed only from the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell8.ShowMessageBoxEx(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,System.Boolean,System.Boolean@)">
            <summary>
            Shows a themed message box with the specified parameters.
            </summary>
            <param name="title">
            The title of the message box.  If this is <see langword="null" />, the title
            will be the name of the application.
            </param>
            <param name="text">The text of the message box.</param>
            <param name="helpTopic">
            The help topic.  If this is not <see langword="null" />, a Help button will be
            displayed in the message box.
            </param>
            <param name="buttons">The buttons to display.</param>
            <param name="defaultButton">The default button.</param>
            <param name="icon">The icon to display.</param>
            <param name="allowSuppression">
            If <see langword="true" />, the user will be given the option to suppress the message box
            in the future.
            </param>
            <param name="suppressed">
            Indicates whether the user chose to suppress the message box in the future.
            If <paramref name="allowSuppression" /> is <see langword="false" />, this will always be
            <see langword="false" />.
            </param>
            <returns>
            A value representing which button the user clicked to close the message box.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell8.ShowMessageBoxExWithHelpId(System.String,System.String,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,System.Boolean,System.Boolean@)">
            <summary>
            Shows a themed message box with the specified parameters.
            </summary>
            <param name="title">
            The title of the message box.  If this is <see langword="null" />, the title
            will be the name of the application.
            </param>
            <param name="text">The text of the message box.</param>
            <param name="helpFile">The help file.</param>
            <param name="helpId">The help identifier.</param>
            <param name="buttons">The buttons to display.</param>
            <param name="defaultButton">The default button.</param>
            <param name="icon">The icon to display.</param>
            <param name="allowSuppression">
            If <see langword="true" />, the user will be given the option to suppress the message box
            in the future.
            </param>
            <param name="suppressed">
            Indicates whether the user chose to suppress the message box in the future.
            If <paramref name="allowSuppression" /> is <see langword="false" />, this will always be
            <see langword="false" />.
            </param>
            <returns>
            A value representing which button the user clicked to close the message box.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult">
            <summary>
            Specifies which message box button a user clicks.
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell8.ShowMessageBoxEx(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,System.Boolean,System.Boolean@)" /> supports buttons that are not
            supported by System.Windows.MessageBox, so the set of possible results
            is a superset of System.Windows.MessageBoxResult.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.None">
            <summary>The message box returns no result.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.OK">
            <summary>The result value of the message box is OK.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.Cancel">
            <summary>The result value of the message box is Cancel.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.Abort">
            <summary>The result value of the message box is Abort.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.Retry">
            <summary>The result value of the message box is Retry.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.Ignore">
            <summary>The result value of the message box is Ignore.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.Yes">
            <summary>The result value of the message box is Yes.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Interop.ExtendedMessageBoxResult.No">
            <summary>The result value of the message box is No.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager7">
            <summary>
            Interface for the IVsSolutionBuildManager7 that provides information about the solution build manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager7.BuildId">
            <summary>
            Get the current build ID. 0 when there is no build in progress.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog.StartWaitDialog(System.String,System.String,System.String,System.UInt32,System.Object,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog.EndWaitDialog(System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog.GiveTimeSlice(System.String,System.String,System.Int32,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsThreadedWaitDialog">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable2">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable2.CloseDocuments(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable2.FindAndLockDocumentEx(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable2.FindOrRegisterAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntry(System.UInt32,System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntryGuid(System.UInt32,System.String,System.String,System.Guid)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntryHr(System.UInt32,System.String,System.String,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntryGuidHr(System.UInt32,System.String,System.String,System.Guid,System.Int32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntryPath(System.UInt32,System.String,System.String,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntryGuidPath(System.UInt32,System.String,System.String,System.Guid,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntryHrPath(System.UInt32,System.String,System.String,System.Int32,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog.LogEntryGuidHrPath(System.UInt32,System.String,System.String,System.Guid,System.Int32,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsActivityLog">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceString(System.Guid@,System.Int32,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceBitmap(System.Guid@,System.Int32,System.String,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceIcon(System.Guid@,System.Int32,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceBlob(System.Guid@,System.Int32,System.String,System.IntPtr@,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceString2(System.String,System.Int32,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceBitmap2(System.String,System.Int32,System.String,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceIcon2(System.String,System.Int32,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.LoadResourceBlob2(System.String,System.Int32,System.String,System.IntPtr@,System.Int32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager.GetSatelliteAssemblyPath(System.String,System.Int32,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsResourceManager">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebProxy">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebProxy.PrepareWebProxy(System.String,System.UInt32,System.UInt32@,System.Int32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsWebProxy">
            <remarks>
            The service represented by this interface has some members that are safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry4">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry4.RegisterClassObject(System.Guid@,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry4.RevokeClassObject(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry4.RegisterInterface(System.Guid@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry4.GetLocalRegistryRootEx(System.UInt32,System.UInt32@,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSolutionPersistence">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsRunningDocumentTable">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFileChangeEx">
            <remarks>
            Some members of the service represented by this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFileChange">
            <remarks>
            The service represented by this interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAppCommandLine">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SLocalRegistry">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SProfferService">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.SUIHostLocale">
            <remarks>
            The service represented by this interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IProfferService">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferService.ProfferService(System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IProfferService.RevokeService(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts">
            <remarks>
            Implementors of this interface are expected to be safe to be accesssed from any thread
            if passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageSolutionProps(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps,System.String)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps">
            <remarks>
            Implementors of this interface are expected to be safe to be accesssed from any thread
            if passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.QuerySaveSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.VSQUERYSAVESLNPROPS[])">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.SaveSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.WriteSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,Microsoft.VisualStudio.OLE.Interop.IPropertyBag)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.ReadSolutionProps(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.OLE.Interop.IPropertyBag)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps.OnProjectLoadFailure(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String,System.String)">
            <remarks>
            Implementors of this method are expected to be safe to be accesssed from any thread
            if its owner is passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence" /> on a background thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.UInt32@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.LockDocument(System.UInt32,System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnlockDocument(System.UInt32,System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.FindAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.AdviseRunningDocTableEvents(Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnadviseRunningDocTableEvents(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyOnAfterSave(System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetRunningDocumentsEnum(Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.SaveDocuments(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyOnBeforeSave(System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterDocumentLockHolder(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnregisterDocumentLockHolder(System.UInt32)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.ModifyDocumentFlags(System.UInt32,System.UInt32,System.Int32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx">
            <remarks>
            This interface must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.AdviseFileChange(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents,System.UInt32@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.UnadviseFileChange(System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.SyncFile(System.String)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.IgnoreFile(System.UInt32,System.String,System.Int32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.AdviseDirChange(System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEvents,System.UInt32@)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx.UnadviseDirChange(System.UInt32)">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine.GetOption(System.String,System.Int32@,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry.GetTypeLibOfClsid(System.Guid,System.Runtime.InteropServices.ComTypes.ITypeLib@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry.GetClassObjectOfClsid(System.Guid@,System.UInt32,System.IntPtr,System.Guid@,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.GetTypeLibOfClsid(System.Guid,System.Runtime.InteropServices.ComTypes.ITypeLib@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.GetClassObjectOfClsid(System.Guid@,System.UInt32,System.IntPtr,System.Guid@,System.IntPtr)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.GetLocalRegistryRoot(System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3">
            <remarks>
            This interface is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetTypeLibOfClsid(System.Guid,System.Runtime.InteropServices.ComTypes.ITypeLib@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetClassObjectOfClsid(System.Guid@,System.UInt32,System.IntPtr,System.Guid@,System.IntPtr)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetLocalRegistryRoot(System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.CreateManagedInstance(System.String,System.String,System.String,System.Guid@,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry3.GetClassObjectOfManagedClass(System.String,System.String,System.String,System.Guid@,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale.GetUILocale(System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale.GetDialogFont(Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT[])">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2">
            <remarks>
            Some members of this interface are safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.GetUILocale(System.UInt32@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.GetDialogFont(Microsoft.VisualStudio.Shell.Interop.UIDLGLOGFONT[])">
            <remarks>
            This method must be accessed on the main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.LoadUILibrary(System.String,System.String,System.UInt32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.MungeDialogFont(System.UInt32,System.Byte[],System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.LoadDialog(System.IntPtr,System.UInt32,System.IntPtr@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Interop.IUIHostLocale2.GetUILibraryFileName(System.String,System.String,System.String@)">
            <remarks>
            This method is safe to access from any thread.
            </remarks>
        </member>
        <member name="M:MarshalHelper.ReleaseComObject(System.Object)">
            <summary>
            A wrapper for <see cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)" /> that no-ops when run on .NET on non-Windows platforms.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>6SFxKcpqeovykCwsxQr2TmytC7DFnMvKsJy+5JB4bPI=</DigestValue></Reference></SignedInfo><SignatureValue>fUmtax1cYrJY3jiH6TLjFMAlobFDj/kIiyrP4BPpUUGWJr5It7O6GHkBN3/u0AvyOGnqreiSJmMjCQVWp2U88BNDPH0D91eO3x9NSw8s4lLL6DsCqHhe7B7l8xt4hCTN+VzO8I005IQGxvPWWGsZNlYwEkWoiP7dcOcKODrSlFM++n9m58E0YbV7xPX9HpyogSxq53H+p+aCvag9yBY1JX+7+62fseb+OWqedqDXzEmUeKMkIb+jaa+z5TeDUvXvy2JYgNilN6BWwu6alVyz52OYP2/AFV2k3t3zaztY4EYwBMm2vE0demJuej64Yhf+oh/EfS5K7uJidinFn8sWgg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>n3RnXcCDp20WFMoNNzt4s9fV12T5roRJlv+bshDfvJoMZfhyRnixgUfGAbrRlS1St/EcXFXD2MhRkF3CnMYIoeMOMuMyYtxr2sC2B5bDRMUMM/r9I4GP2nowUthCWKFIS1RPlM0YoVfKKMaH7bJii29sW+waBUulAKN2c+Gn5znaiOxRqIu4OL8f9DCHYpME5+Teek3SL95sH5GQhZq7CqTdM0fBw/FmLLx98SpBu7v8XapoTz6jJpyNozhcP/59mi/Fu4tT2rI2vD50Vx/0GlR9DNZ2py/iyPU7DG/3p1n1zluuRp3uXKjDfVKH7xDbXcMBJid22a3CPbuC2QJLow==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
